{{from plugin_widgets import TOOLTIP, ROLE, POPOVER}}

<!--# ADMIN PANEL ========================================================-->
{{ap = DIV(H3('Admin Panel'), _class='admin-panel')
ap.append(form) }}
{{=ROLE(ap)}}

<!--# ======================================================================-->
<!--# MAP INTERFACE ========================================================-->
<!--# ======================================================================-->

{{if request.args(0) == 'map' or not request.args:}}
        <object id='town_map' data='{{=map["map_image"]}}' type='image/svg+xml'></object>
        <!-- <embed id='town_map' src='{{=map["map_image"]}}' type='image/svg+xml' /> -->
<!--# ======================================================================-->
<!--# STEP INTERFACE =======================================================-->
<!--# ======================================================================-->
{{else:}}
    <!--# ==================================================================-->
    <!--# PROMPT / REPLY ===================================================-->
    <!--# ==================================================================-->

    <!--# npc image on left ================================================-->
    {{=DIV(npc_image, _class='speaker')}}

    <!--# prompt/reply div==================================================-->
    <div class='npc prompt'>
        <p class='prompt-text'>{{=MARKMIN(prompt_text)}}</p>
        {{if 'readable_long' in globals() and [n for n in readable_long if n]:
            rdbl = UL(_class='readable_long')
            for r in readable_long:
                rdbl.append(LI(r))
            pass
            readable_long_args = {'classnames': 'text-info', 'id': 'readable_btn'}
            xamples = POPOVER().widget('More examples', rdbl,
                                       **readable_long_args)}}
            {{=xamples}}
        {{pass}}
        <!--# audio for prompt =============================================-->
        {{if audio:}}
		<div id="{{=audio['title']}}" class="jp-jplayer"></div>
		<div id="jp_container_1" class="jp-audio" role="application" aria-label="media player">
		  <div class="jp-type-single">
		    <div class="jp-gui jp-interface">
		      <div class="jp-controls-holder">
		        <div class="jp-controls">
		          <i class="fa fa-play-circle-o fa-2x jp-play" role="button" tabindex="0""></i>
		        </div>
		      </div>
		    </div>
		    <div class="jp-details">
		      <div class="jp-title" aria-label="title">Loading audio, please wait...</div>
		    </div>
		    <div class="jp-no-solution">
		      <span>Update Required</span>
		      To play the media you will need to either update your browser to a recent version or update your <a href="http://get.adobe.com/flashplayer/" target="_blank">Flash plugin</a>.
		    </div>
		  </div>
		</div>
		{{pass}}

        <!--# image for prompt =============================================-->
        {{if widget_img:
            img = IMG(_src=URL('static/images/', widget_img['file']),
                        _title=widget_img['title'],
                        _alt=widget_img['description'],
                        _class='widget-image')}}
            {{=img}}
        {{pass}}
        <div>
        <!--# hints popup for reply=========================================-->
        {{if 'hints' in globals() and hints:
            hint_list = UL(_class='prompt_hints fa-ul')
            for h in hints:
                hint_list.append(LI(I(_class='fa-li fa fa-exclamation-circle'), h))
            pass
            hints_args = {'classnames': 'text-warning', 'id': 'instructions_btn'}
            hinter = POPOVER().widget('Hints', hint_list, **hints_args)}}
            {{=hinter}}

        {{pass}}
        <!--# instructions popup for prompt/reply===========================-->
        {{if 'instructions' in globals() and instructions:
            ilist = UL(_class='prompt_instructions fa-ul')
            for itext in instructions:
                ilist.append(LI(I(_class='fa-li fa fa-info-circle'), itext))
            pass
            i_args = {'classnames': 'instructions-popover text-info',
                      'title': 'Instructions for this step',
                      'id': 'instructions_btn'}
            i_pop = POPOVER().widget('Instructions', ilist, **i_args)}}
            {{=i_pop}}
        {{pass}}

        <!--# slides popup for prompt/reply=================================-->
        {{if 'slidedecks' in globals() and slidedecks:
            decklist = UL(_class='prompt_slides fa-ul')
            for did, dname in slidedecks.items():
                decklist.append(LI(I(_class='fa-li fa fa-video-camera'),
                                   A(dname, _href=URL('listing', 'slides.html',
                                     args=[did]))))
            pass
            slides_args = {'classnames': 'slides-popover text-warning',
                           'title': 'Relevant videos',
                           'id': 'slides_btn'}
            s_pop = POPOVER().widget('videos', decklist, **slides_args)}}
            {{=s_pop}}
        {{pass }}
        </div>
    </div>

    <!--# responder div ====================================================-->
    <div class='responder'>
        {{if 'response_form' in locals() and response_form:}}
            {{=response_form}}
        {{pass

        if 'continue' in response_buttons:}}
            {{=A("Continue", _href=URL('walk', args=['ask'], vars={'loc': loc}),
            cid='walk_frame', _class='continue btn btn-success next_q')}}
        {{pass}}

        {{if 'retry' in response_buttons:}}
            {{=A("Try again", _href=URL('walk', args=['repeat'], vars={'loc': loc}),
                 cid='walk_frame', _class='btn btn-warning retry')}}
        {{pass}}

        {{if 'map' in response_buttons:}}
            <a href="#" class="btn btn-success back_to_map">Back to map</a>
        {{pass}}
        {{if sid and pid:}}
            {{stepedit = A('step {}'.format(sid),
                        _href=URL('editing', 'listing', args=['steps', sid]),
                        _class='prompt-s-editlink'
                        )
            pathedit = A('path {}'.format(pid),
                        _href=URL('editing', 'listing', args=['paths', pid]),
                        _class='prompt-p-editlink'
                        )
                        catnum = ' choosing from category {}, new content is {}'.format(category, new_content)}}
            <small>
            {{=ROLE(DIV(pathedit, ', ', stepedit, catnum,
                    _class='prompt-editlinks'))}}
            </small>
        {{pass

        if 'bugreporter' in globals() and bugreporter:}}
            {{=LOAD('creating', 'bug.load', vars=bugreporter, ajax=True)}}
        {{pass}}

        <!--# path counter for prompt/reply=================================-->
        <small class='path-counter progress_text small muted'>
            This will make {{=completed_count}} paths so far today.
        </small>

        <!--# debug                       =================================-->
        {{if (('paideia_debug' in globals()) and paideia_debug):}}
        <small class='path-counter progress_text small muted'>
            {{=XML(paideia_debug)}}
        </small>
        {{pass}}


    </div>
{{pass}}

<!--# page javascript ======================================================-->
<script>
$(document).ready(function(){

    // ========== handle bg image dimensions =============== //
    fit_to_height();
    $(window).resize(function() {
        fit_to_height();
    });

    {{if 'bg_image' in globals():}}
        $('#page').css("background-image", "url({{=bg_image}})");
        $('#page').css("background-size", "100% auto");
        $('#page').css("background-position", "left center");
    {{else:}}
        $('#page').css("background-image", "none");
        $('#page').css("background-size", "100% auto");
    {{pass}}

    // ========== handle popover content =============== //
    $('.popover-trigger').each(function() {
        var $this = $(this);
        $this.popover({html: true,
                        animation: true,
                        content: $this.find('.popover-content').html()});
    });

    // ========== handle pan and zoom for svg map =============== //
    {{if request.args(0) == 'map' or not request.args:}}
        make_map_pan('town_map');
    {{pass}}

    // ========== prevent cutting and pasting from responder input =============== //
    $('div.responder input').bind("cut copy paste", function(e) {
        e.preventDefault();
    });

    {{if request.args(0) != 'map' and request.args:}}
        hide_mask();  // hide mask once page is ready
    {{pass}}

});



</script>

<!--handle audio clips-->
{{if 'audio' in globals() and audio:}}
	<script type="text/javascript">
	//<![CDATA[
	window.setTimeout(jp_after_trigger,500);
	window.setTimeout(paideia_play_audio_clip,1000, "#{{=audio['title']}}",{{=XML(audio['audio_args_for_js'])}},"{{=XML(audio['media_supplied'])}}",1);
	//]]>
	</script>
{{pass}}
