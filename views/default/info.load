{{
from plugin_widgets import TOOLTIP, ROLE
import json
}}

<div class="row profile-user-info">
    <div class="container">
      <!--Above Tabs ================================================================-->
      <ul class='profile-user-info'>
        <li class'profile-name'>
          <span  class='profile-label'>Name</span>{{=the_name}}
        </li>
        <li class'profile-email'>
          <i class='fa fa-envelope-o'></i>
          <span  class='profile-label'>Email</span>{{=email}}
        </li>
        <li class'profile-tz'><span  class='profile-label'>Time Zone</span>
          <i class='fa fa-clock-o'></i>
          {{=tz}}
        </li>
      </ul>
    </div>
</div>

<div class="row tabrow">
  <div class='container'>
    <!-- Nav tabs -->
    <ul class="nav nav-tabs" role="tablist">
      <li role="presentation" class="active"><a href="#web2py_user_form" aria-controls="web2py_user_form" role="tab" data-toggle="tab">
          <i class="fa fa-certificate"></i>Badges
        </a>
      </li>
      <li role="presentation"><a href="#tab_calendar" aria-controls="tab_calendar" role="tab" data-toggle="tab">
          <i class="fa fa-calendar-check-o"></i>Calendar
        </a>
      </li>
      <li role="presentation"><a href="#tab_bug_reports" aria-controls="tab_bug_reports" role="tab" data-toggle="tab">
          <i class="fa fa-comments"></i>Queries
        </a>
      </li>
      <li role="presentation"><a href="#tab_settings" aria-controls="tab_settings" role="tab" data-toggle="tab">
          <i class="fa fa-sliders"></i>Settings
        </a>
      </li>
      <li role="presentation"><a href="#tab_stats" aria-controls="tab_stats" role="tab" data-toggle="tab">
          <i class="fa fa-line-chart"></i>Stats
        </a>
      </li>
    </ul>
  </div>  <!-- close container -->
</div>

<div class="row">
  <!-- Tab panes -->
  <div class="tab-content">
    <div role="tabpanel" class="tab-pane active" id="web2py_user_form">
    <!-- TAB 1 - BADGE INFO ==========================================================-->
      <div class="container">
        <div class="row">
          <div class="col-xs-4 profile-overall-progress">
            <h3>Overall Progress</h3>
            <ul class='set_scale'>
              {{for n in reversed(range(1, 21)):
                  current_state = 'current' if n == max_set else ''
                  active_state = 'active' if n<= max_set else ''
                  }}
                  <li class='{{=active_state}} {{=current_state}}'>
                    <span class='set-scale-num set{{=n}}'>{{=n}}</span>
                    {{if starting_set and n == starting_set:}}
                      <span class='set-scale-start'><i class="fa fa-road"></i><span>Term start</span></span>
                    {{pass}}
                    {{if target_set and n == target_set and target_set != max_set:}}
                      <span class='set-scale-target'><i class="fa fa-crosshairs"></i><span>A-grade target</span></span>
                    {{pass}}
                  </li>
              {{pass}}
            </ul>
            <p class="progress-message">
              So far, I have reached badge set {{=max_set}}.
              {{if target_set:}}
                I began this term at badge set {{=starting_set}} and
                {{if max_set >= target_set:}}
                  I have already reached the target of set {{=target_set}} to earn an A.
                {{else:}}
                  my goal to earn an A is to reach set {{=target_set}} by {{=end_date}}.
                {{pass}}
              {{else:}}
                I am not currently enrolled in a course, so I have no term
                target.
              {{pass}}
            </p>

          </div> <!-- close overall progress column -->
          <div class="col-xs-8 profile-badge-progress">
            <h3>Progress in each badge</h3>
            <div class="tabbable tabs-left ">
              <ul class="nav nav-tabs">
                <li><a href="#master" data-toggle="tab">master
                    {{print(badge_levels)}}
                    <span class='badge-level-count'>{{=len(badge_levels[4])}}<span>
                  </a>
                </li>
                <li><a href="#journeyman" data-toggle="tab">journeyman
                    <span class='badge-level-count'>{{=len(badge_levels[3])}}<span>
                  </a>
                </li>
                <li><a href="#apprentice" data-toggle="tab">apprentice
                    <span class='badge-level-count'>{{=len(badge_levels[2])}}<span>
                  </a>
                </li>
                <li class="active"><a href="#beginner" data-toggle="tab">beginner
                    <span class='badge-level-count'>{{=len(badge_levels[1])}}<span>
                  </a>
                </li>
              </ul>
              <div class="tab-content">
                <div class="tab-pane " id="master">
                  {{=CAT([SPAN(b[0], _class='label label-success') for b in badge_levels[4]])}}
                </div>
                <div class="tab-pane" id="journeyman">
                  {{=CAT([SPAN(b[0], _class='label label-info') for b in badge_levels[3]])}}
                </div>
                <div class="tab-pane" id="apprentice">
                  {{=CAT([SPAN(b[0], _class='label label-primary') for b in badge_levels[2]])}}
                </div>
                <div class="tab-pane active" id="beginner">
                  {{=CAT([SPAN(b[0], _class='label label-warning') for b in badge_levels[1]])}}
                </div>
              </div> <!-- close tab-content -->
            </div>  <!-- close info-tab1-badge-levels -->

          </div>  <!--close badge progress column -->
        </div> <!--close first row of badges tab pane -->
      </div>
      <div class='row profile-badge-details'>
        <div class='container'>
          <h3 >Details for each badge</h3>
          <div class='dc_container badgetable-container'>
            <table class='table table-hover' id='table-badges' style="width: 100%">
              <thead>
                <tr class='header'>
                  <th>Badge</th>
                  <th>Set</th>
                  <th>Level</th>
                  <th>Right per 1 wrong</th>
                  <th>Avg score (5 days)</th>
                  <th>Times Right</th>
                  <th>Times Wrong</th>
                  <th>Between right and wrong</th>
                  <th>Since last right</th>
                  <th>Last Right</th>
                  <th>Last Wrong</th>
                  <th>Since last wrong</th>
                  <th>Attempts today</th>
                  <th>Attempts yesterday</th>
                </tr>
              </thead>
              <tbody>

                {{for trow in badge_table_data:}}
                  <tr>
                    <td>{{=trow['bname']}}</td>
                    <td>{{=trow['set']}}</td>
                    <td>{{=trow['curlev']}}</td>
                    <td>{{=trow['rw_ratio']}}</td>
                    <td>{{=trow['avg_score']}}</td>
                    <td>{{=trow['tright']}}</td>
                    <td>{{=trow['twrong']}}</td>
                    <td>{{=trow['delta_rw'].days}}</td>
                    <td>{{=trow['delta_r'].days}}</td>
                    <td data-order='{{=trow['tlr'][0]}}'>{{=trow['tlr'][1]}}</td>
                    <td data-order='{{=trow['tlw'][0]}}'>{{=trow['tlw'][1]}}</td>
                    <td>{{=trow['delta_w'].days}}</td>
                    <td>{{=trow['todaycount']}}</td>
                    <td>{{=trow['yestcount']}}</td>
                  </tr>
                {{pass}}
              </tbody>
            </table>
          </div>
        </div>  <!--close row-->
      </div>  <!-- close container-->
    </div>  <!--close Badges tab pane -->

    <div role="tabpanel" class="tab-pane" id="tab_calendar">
    <!-- TAB 2 - CALENDAR ===============================================================-->
      {{=XML(cal)}}
    </div>  <!-- close Calendar tab pane -->

    <div role="tabpanel" class="tab-pane" id="tab_bug_reports">
    <!-- TAB 3 - BUGS ===============================================================-->
      <table id='table-queries' class='table'>
        <thead>
          <tr>
            <th>Question</th>
            <th>Your answer</th>
            <th>Good answers</th>
            <th>Score</th>
            <th>Submitted</th>
            <th>Your comments</th>
            <th>Evaluation</th>
            <th>New score</th>
            <th>Instructor's comments</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
            {{for bug in blist:}}
            <tr id='{{=bug[0]}}' class="{{='{} {}'.format(bug[7], bug[-1])}}">
                <td class='question'>{{=bug[1]}}</td>
                <td class='answer'>{{=bug[2]}}</td>
                <td class='good-answers'>{{=bug[3]}}</td>
                <td class='score'>{{=bug[4]}}</td>
                <td class='submitted'>{{=bug[5]}}</td>
                <td class='student-comment'>
                    <span>{{=bug[6] if bug[6] != None else ''}}&nbsp;</span>
                    <a href="{{=bug[0]}}" class='edit-user-comment' data-toggle='tooltip' data-placement='left' title='Click to edit.'><i class='fa fa-pencil'></i></a>
                </td>
                <td class='evaluation'>{{=str(bug[7]).replace('_', ' ')}}</td>
                <td class='new-score'>{{=bug[8]}}</td>
                <td class='instructor-comment'>{{=bug[9] if bug[9] != None else ''}}</td>
                <td class='read'>
                        {{if bug[-1] == 'bug-read' and bug[9]:}}
                            <label for='response-read-{{=bug[0]}}' data-toggle='tooltip' data-placement='left' title='Click to mark this as unread.'>
                            <i class='fa fa-envelope-open-o'></i></label>
                            <input type='checkbox' checked='checked' id='response-read-{{=bug[0]}}' class='read-with-comment' />
                        {{elif bug[-1] == 'bug-unread' and bug[9]:}}
                            <label for='response-read-{{=bug[0]}}'>
                            <i class='fa fa-envelope-o'  data-toggle='tooltip' data-placement='left' title='Click to mark this as read.'></i></label>
                            <input type='checkbox' id='response-read-{{=bug[0]}}' class='unread-with-comment' />
                        {{else:}}
                        {{pass}}
                        </br>

                    <a href="{{=bug[0]}}" class='delete' data-toggle='tooltip' data-placement='left' title='Permanently delete this query.'><i class='fa fa-trash-o'></i></a></br>

                    {{=ROLE(A(I(_class='fa fa-edit'), _href=URL('editing', 'listing.html',
                                                      args=['bugs', bug[0]],
                                                      vars=dict(restrictor={'bug_status': '5'})),
                                                      _class='edit'))}}
                </td>
            </tr>
            {{pass}}
        </tbody>
      </table>
    </div>  <!-- close queries tab pane -->

    <div role="tabpanel" class="tab-pane" id="tab_settings">
    <!-- TAB 4 - SETTINGS ==============================================================-->
      <div class='container'>
          <h3>Review a badge set</h3>
          <div class="row">
              <div class="col-sm-3">
                  <select id='set_review_select' class='form-control'>
                    {{if reviewing_set:}}
                      {{=OPTION('badge set {}'.format(str(reviewing_set)))}}
                      {{=OPTION('Stop reviewing')}}
                    {{else:}}
                      {{=OPTION('Not reviewing')}}
                    {{pass}}
                    {{for n in [num for num in range(1,21) if num != int(max_set)]:}}
                      {{=OPTION('badge set {}'.format(str(n)))}}
                    {{pass}}
                  </select>
              </div> <!-- close col div -->
              <div class="col-sm-9">
                  <p class='review-instructions'>If you select a badge set from the menu above, you will
                      only be given paths selected (randomly) from that badge
                      set. When you want to return to the normal selection of
                      paths, select 'Stop reviewing.'
                  </p>
                  <p class="bg-info text-info">Reviewing is automatically turned off at the beginning of each day, so you will need to select a review set again on each day that you want to continue reviewing.</p>
                  <p class="bg-danger text-danger">Keep in mind that while you are reviewing you are not making progress with your newest badge set.</p>
                  <p class='review-instructions'>Note that because review mode selects paths randomly you may experience more repetition than usual. You are also not allowed to review your current badge set. This is because the review function does not focus on any particular badges within a set. Regular mode, though, focuses at least half of your paths each day on the specific badges that remain at "beginner" level. So regular mode is actually better for progressing through your newest material.</p>
              </div> <!-- close col div -->
          </div> <!-- close row div -->
      </div> <!-- close container div -->
    </div>  <!-- close Settings tab pane -->

    <div role="tabpanel" class="tab-pane" id="tab_stats">
    <!-- TAB 5 - STATS ==============================================================-->
      <div class='stats-container'>
        <h3>Badge set progress with correct and incorrect answers</h3>
        <div class='input-group'>
          <span id='badge_set_chooser_label' class='input-group-addon'>Show attempts for  </span>
          <select id='badge_set_chooser' class='form-control'>
            <option>all badge sets</option>
            {{for set in badge_set_dict.keys():}}
              <option value='{{=set}}'>set {{=set}}</option>
            {{pass}}
          </select>
          <select id='badge_chooser'>
          </select>
        </div>  <!-- close input group-->
        <div id='milestones_attempts_combo'></div>
      </div>
    </div>  <!-- close Stats tab panel -->
  </div>  <!-- close tab content -->

</div>  <!-- close tabs row -->

{{
tab2_content = CAT(P('Sorry, something went wrong retrieving your badges.'))

tab2_content.append(CAT(H3('What do these levels mean?'),
    P('It is important to realize that the four badge levels above are '
      'not "grades" like the letter grades we earn in most courses. They are, '
      'instead, stages in your learning of each element of Greek. Level 1 '
      '(beginner) is awarded when you start to learn a topic. It simply means '
      'that you are working on it. In your daily interactions in the town, the '
      'program will prioritize conversations tagged with these "beginner" badges '
      'since they are the ones you most need to review.'),
    P('At the other end of the scale, Level 4 (master) is awarded when you no '
      'longer need to learn anything more about that aspect of the language. '
      'You have shown that this knowledge is now in your long-term memory, and '
      'you are now on a permanent maintenance routine in which you only review '
      'that material once every six months. Don\'t be discouraged if you find '
      'that it takes a long time to reach "master" level for any badges. This '
      'doesn\'t mean you aren\'t progressing. It just means that you\'re still '
      'working on getting that topic into your long-term memory -- a process '
      'that can\'t be rushed.'),
    P('Between these two extremes, level 2 ("apprentice") and level 3 '
      '("journeyman") represent increasing levels of mastery over a particular '
      'element of Greek. You will review the material related to such badges '
      'less and less often as you continue to provide good responses when such '
      'conversations do come up. Normally, you will find that badges begun '
      'during a term will remain at levels 2 or 3 through at least the balance '
      'of that term. This doesn\'t mean anything is wrong. It just represents '
      'the fact that true mastery is a longer-term goal.'),
    H3('How do I earn new badges?'),
    P('You begin a new badge at level 1 when all of your current badges have '
      'been promoted to level 2 or higher. The program recognizes that you are '
      'ready to learn something new.'),
    P('There are two different ways to reach level 2 ("apprentice") with a '
      'particular badge. (a) First, if you provide consistently right answers '
      '(with no errors) over a period of a day or two, then that badge will be '
      'promoted to level 2. (b) Alternately, you will be promoted despite some '
      'errors if you have given at least 8 correct responses for each error over '
      'the last two weeks. In either case you won\'t be promoted until you have '
      'done at least 20 paths related to that badge, with at least 24 hours '
      'between the first success and the most recent success. Keep in mind that '
      'on a given day your paths will not all be focused on the same badges. '
      'So even if you provide good answers on 20 paths in a row, this may mean '
      'that you have only added 5 or 6 successes to your record for a particular '
      'badge. This is one advantage of doing extra paths regularly - you will '
      'progress more quickly because you are working on each of your level 1 '
      'badges more often.'),
    P('Levels 3 and 4 are reached as you go longer and longer without any '
      'errors in your responses on a given topic. If you make no errors with a '
      'badge over 7 days, it will be promoted to level 3. You are clearly '
      'retaining that knowledge and beginning toward real mastery. If you then '
      'go 30 days without any errors on that topic, the badge will be promoted '
      'to level 4 (mastered).'),
    H3('What are the "Badge Level" and "Review Level" columns?'),
    P('In the "badge level" column you see the highest level you have achieved '
      'so far for a particular badge. Periodically, though, the program will '
      'decide that you need to review your level 2, 3, or 4 badges. At that '
      'point, the badge will move to "level 1" in the "review level" column. '
      'This doesn\'t mean you have been demoted. It just means that the program '
      'is going to prioritize that badge as if it were brand new material. Even '
      'for badges that you have mastered, you will review those topics at least '
      'once every three months. If you give good responses to the review '
      'material, this review level will last only a day. The next day you will '
      'find the badge has returned to its normal review level and you will be '
      'much less likely to see those paths until the next review period is up.'),
    P('If you give a wrong answer during a review period, you don\'t lose your '
      'previous badge level. But the program recognizes that you may need to '
      'review that material more frequently. So, instead of the badge jumping '
      'right back to its original review level, you will see it move up through '
      'the review levels as if you were earning it again. This just means that '
      'the program is making sure you see it often enough. If you don\'t make '
      'more mistakes, you will quickly find the badge\'s review level is back '
      'up to the "badge level" you have attained.')
))
}}


<!--# LOCAL SCRIPTS ======================================================-->
<script type="text/javascript" charset="utf-8">


// chart 1
showChart1('{{=XML(json.dumps(chart1_data))}}',
           '{{=URL("default", "get_chart1_data_json")}}',
           '{{=user_id}}');

// show tab from hash when first opening page
var url = document.location.toString();
if (url.match('#')) {
    $('.nav-tabs a[href=#'+url.split('#')[1]+']').tab('show') ;
    window.scrollTo(0, 0);
};

// Change hash for when tab shown
$('.nav-tabs a').on('shown.bs.tab', function (e) {
    window.location.hash = e.target.hash;
    window.scrollTo(0, 0);
});

// Change selection type when changing select value
$(document).on('change', '#set_review_select', function(event){
    var myset_label = $(this).val();
    var myset = myset_label.replace('badge set ', '');
    if (isNaN(myset)){
        myset = 'none';
    };
    ajax('/paideia/default/set_review_mode/' + myset, [], ':eval');
});

var querytable = $('#table-queries').DataTable({dom: 'f<"#queries-vis-toggle.form-group">Bti',
                                                paging: false,
                                                scrollY: '400px',
                                                scrollX: true,
                                                renderer: 'bootstrap',
                                                order: [4, 'asc'],
                                                buttons: [
                                                    'colvis', 'pdf'
                                                ],
                                                fixedHeader: true,
                                                "language": {
                                                    "search": "Filter list"
                                                },
                                                "columns": [
                                                    {"className": "question",
                                                     "orderable": false},
                                                    {"className": "answer",
                                                     "orderable": false},
                                                    {"className": "good-answers",
                                                     "orderable": false},
                                                    {"className": "score",
                                                     "width": "60px",
                                                     "orderable": false},
                                                    {"className": "submitted",
                                                     "visible": false},
                                                    {"className": "student-comments",
                                                     "orderable": false},
                                                    {"className": "evaluation",
                                                     "visible": false},
                                                    {"className": "adjusted-score",
                                                     "orderable": false},
                                                    {"orderable": false,
                                                     "className": "instructor-comments",
                                                     "width": "30%"},
                                                    {"orderable": false,
                                                     "className": "read",
                                                     "width": "14px"},
                                                ],
    });

    var badgetable = $('#table-badges').DataTable({
                        dom: 'fBti',
                        paging: false,
                        scrollY: '400px',
                        scrollX: true,
                        renderer: 'bootstrap',
                        order: [2, 'asc'],
                        buttons: [
                            'colvis'
                        ],
                        fixedColumns: {
                            leftColumns: 1
                        },
                        fixedHeader: true,
                        responsive: false,
                        "columns": [
                          {"className": "badge-name"},
                          {"className": "set"},
                          {"className": "level"},
                          {"className": "right-per-wrong",
                           "orderable": false},
                          {"className": "avg",
                           "orderable": false},
                          {"className": "times-right",
                           "orderable": false},
                          {"className": "times-wrong",
                           "orderable": false},
                          {"visible": false,
                           "orderable": false,
                           "className": "between"},
                          {"visible": false,
                           "orderable": false,
                           "className": "since-right"},
                          {"visible": false,
                           "orderable": false,
                           "className": "last-right"},
                          {"visible": false,
                           "orderable": false,
                           "className": "last-wrong"},
                          {"visible": false,
                           "orderable": false,
                           "className": "since-wrong"},
                          {"visible": false,
                           "orderable": false,
                           "className": "today"},
                          {"visible": false,
                           "orderable": false,
                           "className": "yesterday"},
                        ],
                     });
$('a[data-toggle="tab"]').on('shown.bs.tab', function(e){
   querytable.columns.adjust();
   badgetable.columns.adjust();
});

$(document).on('click',
               'a.monthpicker, a.monthcal_nav_link_next, a.monthcal_nav_link_previous',
               function(event){
        event.preventDefault();
        myurl = $(this).attr('href');
        ajax(myurl, [], 'paideia_monthcal');
});


// Prevent overlaps in overall progress widget

function getPositions(box) {
  var pos = $(box).position();
  var height = $(box).outerHeight();
  return [ pos.top, pos.top + height ];
}

function comparePositions(p1, p2) {
  var x1 = p1[0] < p2[0] ? p1 : p2;
  var x2 = p1[0] < p2[0] ? p2 : p1;
  if (x1[1] > x2[0] || x1[0] === x2[0]) {
      return [true, x1[1]]
  } else {
      return [false, 0]
  }
}

function checkCollisions(elem1, elem2){
  var pos1 = getPositions(elem1);
  var pos2 = getPositions(elem2);
  var verticalMatch = comparePositions(pos1, pos2);
  var verticalChange = verticalMatch[1] + 21;
  if (verticalMatch[0]) {
      $(elem2).css({'transform': 'translate(0px, ' + verticalChange + 'px)'});
  }
}

function keepInBounds(elem){
  var mytop = $(elem).position().top;
  if ( mytop < 0 ) {
      $(elem).css({'transform': 'translate(0px, ' + -(mytop) + 'px)'});
  }
};

keepInBounds($('.current .set-scale-num')[0]);
checkCollisions($('.current .set-scale-num')[0], $('.progress-message')[0]);
$(window).resize(function(){
    checkCollisions($('.current .set-scale-num')[0], $('.progress-message')[0]);
});

// handle delete links in queries view

$('td.read a.delete').confirm({
    title: 'Really delete your query?',
    content: 'Please only delete this query if you submitted it by mistake or you have figured out the answer on your own. Old queries should be set to "read" rather than being deleted.',
    buttons: {
      delete: {
        text: 'delete',
        keys: ['enter'],
        action: function () {
                var log_id = this.$target.attr('href');
                var my_resp = ajax('/paideia/default/mark_bug_deleted/' + log_id , [], ':eval');
                var $my_row = this.$target.closest('tr');
                $my_row.find('td').each(function(){
                    $(this).wrapInner('<div style="display:block;" />');  // to allow animation of height
                    $innerDiv = $(this).find('div');
                    var mySequence = [
                        { e: $(this), p: {backgroundColor: "#ffaaaa"}, o: {duration: 300, easing: "easeInCubic"} },
                        { e: $(this), p: {opacity: "0",
                                          backgroundColor: "#fff"}, o: {duration: 300, easing: "easeOutCubic"} },
                        { e: $(this), p: {paddingTop: "0px",
                                          paddingBottom: "0px",
                                          border: "0px",
                                          maxHeight: "0px"}, o: {duration: 300} },
                        { e: $innerDiv, p: "slideUp", o: {easing: "easeOutCubic", duration: 300, sequenceQueue: false} }
                    ];
                    $.Velocity.RunSequence(mySequence);
                });
            },
        },
        cancel: function () {
        },
    }
});

// handle comment edit links in queries view
$('td.student-comments').click(function(e){
    $(this).attr('contenteditable', 'true').focus();
});
$('td.student-comments').on('blur', function(e){
    $(this).attr('contenteditable', 'false');
    var new_text = this.innerText;
    var log_id = $(this).closest('tr').attr('id');
    var my_url = '/paideia/default/update_bug_user_comment/' + log_id;
    $.ajax({url: my_url,
            type: 'POST',
            data: {mytext: new_text},
            success: function(result){
            },
            error: function(result){
                $.alert({title: 'Error updating comment', content: result});
            }
    });

});

// handle read links in queries view

$('td.read input.read-with-comment, td.read input.unread-with-comment').on('change', function(){
    var $label = $(this).closest('td').find("label[for='"+$(this).attr('id')+"']");
    var $row = $(this).closest('tr');
    var bugid = $row.attr('id');
    var $counter = $(document).find('#unread-counter span');
    startCount = parseInt($counter.text());
    if (this.checked) {
        $label.html('<i class="fa fa-envelope-open-o"></i>');
        $row.removeClass('bug-unread');
        $row.addClass('bug-read');
        console.log($row);
        if ( $('#queries-vis-toggle input').prop('checked') ) {
            $row.velocity("fadeOut", 300);
        } else {
            $row.velocity({opacity: '0.5'}, 300);
        }
        newCount = startCount - 1;
        $counter.text(newCount);
    }
    else {
        $label.html('<i class="fa fa-envelope-o"></i>');
        $row.removeClass('bug-read');
        $row.addClass('bug-unread');
        $row.velocity({opacity: '1'}, 300);
        newCount = startCount + 1;
        $counter.text(newCount);
    }
    var result = ajax('/paideia/default/mark_bug_read/' + bugid + '/' + this.checked, [], ':eval');
});

// handle "hide read" toggle in queries view
$('#queries-vis-toggle').html('<label for="queries-vis-toggle-input"><input id="queries-vis-toggle-input" type="checkbox" class="form-control input-sm" aria-controls="table-queries" />Hide read queries<span class="cr"><i class="cr-icon glyphicon glyphicon-ok"></i></span></label>');
$('#queries-vis-toggle input').on('change', function(){
    if ( this.checked ){
        $('tr.bug-read').each(function(){
            $(this).velocity("fadeOut", 300);
        });
    } else {
        $('tr.bug-read').each(function(){
            $(this).css('display', 'table-row');
            $(this).velocity({opacity: "0.5"}, 300);
        });
    }
    ajax('/paideia/default/set_query_visibility/{{=user_id}}/' + this.checked, [], ':eval');
});
//
{{if query_visibility:}}
    $('#queries-vis-toggle input').prop('checked');
    $('tr.bug-read').each(function(){
        $(this).css('display', 'none');
    });
{{pass}}

// initialize all bootstrap tooltips on page
$(function () {
  $('[data-toggle="tooltip"]').tooltip()
})

</script>

</div>
</div>
</div>

<style>
/***********************/
/* USER STATS & CHARTS */
/***********************/

#badge_chooser {
    display: none;
}

#badge_set_chooser {
    width: 10em;
}

#badge_set_chooser_label {
    margin-left: 6em;
}

#milestones_attempts_combo .context {
    /*fill: #efefef;    */
}

#milestones_attempts_combo .focus .right,
#milestones_attempts_combo .context .right{
    fill: #96BC44;
    -webkit-transition: fill 300ms;
    -o-transition: fill 300ms;
    transition: fill 300ms;
}

#milestones_attempts_combo .focus .right:hover,
#milestones_attempts_combo .context .right:hover{
    fill: #56790B;
    -webkit-transition: fill 300ms;
    -o-transition: fill 300ms;
    transition: fill 300ms;
}
#milestones_attempts_combo .focus .wrong,
#milestones_attempts_combo .context .wrong {
    fill: #337AB7;
    -webkit-transition: fill 300ms;
    -o-transition: fill 300ms;
    transition: fill 300ms;
}

#milestones_attempts_combo .focus .wrong:hover,
#milestones_attempts_combo .context .wrong:hover{
    fill: #5393CB;
    -webkit-transition: fill 300ms;
    -o-transition: fill 300ms;
    transition: fill 300ms;
}

#milestones_attempts_combo .y-axis-label,
#milestones_attempts_combo .y2-axis-label {
    fill: #aaa;
    font-size: 120%;
    font-weight: normal;
    letter-spacing: 0.2;
}

#milestones_attempts_combo .focus-line,
#milestones_attempts_combo .context-line {
    stroke: orange;
    stroke-width: 2;
    fill-opacity: 0;
    pointer-events: none; /* so line doesn't interfere */
}

.brush .extent {
  stroke: #efefef;
  fill: #666;
  fill-opacity: .125;
  shape-rendering: crispEdges;
}

.stats-container {
    width: 700px;
    margin: 0 auto;
}

.chart .axis line,
.chart .axis path,
.chart .tick line {
    fill: none;
    stroke: #ccc;
}

.chart .axis line,
.chart .axis path {
    shape-rendering: crispEdges;
}

.chart .axis text {
    font-size: .9em;
}

.chart1.tooltip {
    position: absolute;
    display:block;
    width: 100px;
    padding: 1em;
    background-color: white;
    -webkit-border-radius: 4px;
    border-radius: 4px;
    -webkit-box-shadow: 1px 1px 5px #000;
    box-shadow: 1px 1px 5px #000;
}

/*.chart1.tooltip.hidden {
    display: none;
}*/

</style>
